# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  ## Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'myServiceConnection'
  
  ## Web app name
  webAppName: 'flask-ml-service-app'

  ## Agent VM image name
  vmImageName: 'ubuntu-latest'

  ## Environment name
  environmentName: 'flask-ml-service'

  ## Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  ## Python version: 3.8
  pythonVersion: '3.8'

  pyenv: 'antenv'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: $(pythonVersion)
            displayName: 'Use Python 3.8'

          - script: |
              python -m venv $(pyenv)
              source $(pyenv)/bin/activate
              python -m pip install --upgrade pip
              pip install setup
              pip install -r requirements.txt
            workingDirectory: $(projectRoot)
            displayName: "Install requirements"


          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: $(projectRoot)
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            displayName: 'Upload package'
            artifact: drop

  - stage: Deploy
    displayName: 'Deploy Web App'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeploymentJob
        pool:
          vmImage: $(vmImageName)
        environment: $(environmentName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: UsePythonVersion@0
                  inputs:
                    versionSpec: $(pythonVersion)
                  displayName: 'Use Python version'

                - task: AzureWebApp@1
                  displayName: 'Deploy Azure Web App'
                  inputs:
                    azureSubscription: $(azureServiceConnectionId)
                    appName: $(webAppName)
                    package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
